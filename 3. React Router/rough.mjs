// DSA
let a = [
    1, 1, 1, 1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 8, 10, 11, 11, 11, 12, 13, 13, 13, 15, 15, 16, 16, 17, 17, 17, 17, 18, 19, 19, 20, 20, 22, 24, 24, 24, 25, 26, 27, 28, 28, 30, 30, 32, 33, 33, 33, 34, 35, 36, 36, 37, 37, 37, 37, 37, 38, 40, 41, 42, 42, 43, 43, 44, 44, 45, 45, 45, 46, 46, 46, 49, 50, 51, 51, 52, 52, 52, 52, 53, 53, 53, 54, 54, 55, 56, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 61, 62, 63, 63, 63, 63, 64, 65, 65, 66, 66, 67, 68, 68, 68, 68, 68, 69, 70, 71, 71, 71, 72, 72, 72, 72, 72, 73, 73, 74, 74, 75, 75, 76, 76, 76, 76, 78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 82, 83, 84, 85, 85, 86, 86, 86, 87, 87, 88, 89, 89, 90, 90, 90, 91, 91, 92, 93, 93, 93, 94, 94, 95, 95, 95, 96, 96, 96, 97, 97, 98, 99, 99, 100, 100, 101, 102, 103, 103, 103, 104, 104, 106, 106, 107, 107, 107, 108, 109, 109, 109, 110, 111, 112, 112, 112, 113, 115, 115, 115, 115, 117, 118, 118, 119, 119, 120, 120, 120, 120, 121, 121, 122, 122, 123, 123, 124, 124, 126, 126, 126, 127, 127, 127, 128, 129, 129, 129, 129, 130, 132, 132, 132, 133, 133, 134, 135, 135, 137, 137, 138, 138, 138, 139, 140, 141, 141, 143, 144, 144, 144, 145, 146, 147, 147, 147, 147, 148, 148, 148, 149, 149, 149, 149, 150, 151, 152, 152, 152, 153, 155, 155, 155, 155, 156, 156, 156, 156, 156, 157, 158, 159, 160, 160, 160, 160, 161, 162, 162, 163, 163, 163, 164, 165, 166, 168, 168, 168, 169, 169, 170, 171, 171, 173, 173, 173, 174, 175, 175, 175, 175, 175, 176, 176, 177, 178, 178, 178, 180, 180, 180, 180, 180, 181, 182, 182, 182, 184, 184, 184, 184, 185, 187, 187, 187, 189, 189, 189, 189, 189, 190, 190, 190, 190, 190, 191, 192, 192, 193, 194, 195, 195, 196, 196, 197, 197, 197, 198, 200, 200, 202, 202, 202, 203, 204, 204, 205, 205, 206, 206, 206, 208, 209, 209, 211, 212, 212, 212, 214, 214, 214, 215, 215, 215, 215, 216, 216, 216, 216, 218, 218, 218, 218, 218, 219, 220, 221, 222, 223, 224, 224, 226, 226, 226, 228, 228, 228, 230, 230, 231, 231, 232, 233, 234, 235, 235, 235, 235, 236, 236, 237, 237, 237, 238, 238, 238, 238, 239, 239, 240, 241, 242, 244, 244, 246, 248, 248, 248, 249, 250, 251, 252, 253, 253, 253, 254, 254, 255, 255, 257, 258, 258, 258, 259, 261, 261, 262, 262, 263, 264, 264, 265, 266, 266, 267, 267, 268, 268, 268, 269, 270, 270, 270, 271, 271, 272, 272, 273, 276, 276, 276, 276, 276, 277, 277, 280, 281, 283, 284, 284, 285, 285, 287, 287, 292, 292, 292, 293, 299]

// Linear search: line by line
// for (let i = 0; i < a.length; i++) {
//     console.log("iteration: "  i + 1)
//     if (a[i] === 177) {
//         console.log("found at index: ", i)
//         break;
//     }
// }

// Binary search
let dataCopy = [...a]

const search = (givenQuery, data, index = 1) => {
    console.log("iteration number: ", index)
    console.log("data: ", data)

    let mid = parseInt(data.length / 2);
    let left = data.slice(0, mid);
    let right = data.slice(mid + 1, data.length)

    if (givenQuery === data[mid]) {
        console.log("Found at index: ", a.indexOf(givenQuery))
        return;
    }
    else if (givenQuery < data[mid]) {
        search(givenQuery, left, index + 1)
    }
    else if (givenQuery > data[mid]) {
        search(givenQuery, right, index + 1)
    }
}

search(177, dataCopy)


